"=============================================================Встроенные функции=================================================================================="

#  enumerate  - функция, которая принимает последовательн

# string = 'Hello'
# enum = enumerate(string)
# # print(enum) # <enumerate object at 0x7ff1fe949b40>
# # print(list(enum)) # [(0, 'H'), (1, 'e'), (2, 'l'), (3, 'l'), (4, 'o')]

# string = 'world'
# enum = enumerate(string, 5)
# print(list(enum)) #[(5, 'w'), (6, 'o'), (7, 'r'), (8, 'l'), (9, 'd')]


                                            # Задачка 
#  дан список с числами, умножьте на 2 все числа под нечетным индексом, умножьте на 3 все числа под индексом, кратным 3

# list1 = [1,4,78,3,7,0,4,2,7]

# for ind in range(len(list1)):
#     element = list1[ind]
#     if ind % 2:
#         list1[ind] = element * 2
#     if ind % 3 == 0:
#         list1[ind] = element * 3
# print(list1) #[3, 8, 78, 9, 7, 0, 12, 4, 7]

# Создайте словарь, где ключом будет порядковый номер буквы в алфавите, а значением буква
#  {1:'a', 2:'b', 3:'c'...}

# print(dict(enumerate(string,1)))


#                                                               # zip
# list1 = [1,12,3,4,5]
# list2 = 'abcdefg'
# list3 = [0.2,0.3,0.6]
# print(list(zip(list1,list2,list3))) #[(1, 'a', 0.2), (12, 'b', 0.3), (3, 'c', 0.6)]


"=====================================================================Функция высшего порядка====================================================================================="
#  Это функция, которая:
# принимает в аргументы другую функцию
# возврашает функцию 
# создает внутри функцию
# вызывает внутри себя функцию


#  map - принимает в аргументы функцию и итерируемый объект. возврашает генератор, в котором все элементы результат принимающей функции, в которую передали элементы последовательности.
# mapped = map(int, ['1','2','3'])
# print(list(mapped)) #[1, 2, 3]

# дан список с числами, создайте новый список, где элементы - число из списка +1
# list1 =[1,2,3,4]
# res =[2,3,4,5]
# def res(i):
#     return i+1
# print(list(map(res, list1))) #[2, 3, 4, 5]
# filter - ринимает в аргументы функцию и итерируемый объект. возврашает генератор, в котором элементы из последовательности прошедшие фильтр (функция вернула True)
# list1 = [-3,7,0,34,-23,456,10]
# def is_positive(i):
#     return i > 0
# print(list(filter(is_positive, list1))) #[7, 34, 456, 10]


#  дан список со строками. оставьте только те строки, которые начинаются с большой буквы
# list1 = ['Hello' , 'wORLD','MAKERS']
# res = [ i for i in list1 if i[0].isupper()]
# print(res)

# reduce - функция, которая импортируется из functools.
# тоже принимает функцию и итерируемый объект.
# возврашает 1 результат 

from functools import reduece 
# string = 'hello'
# print(reduce(lambda x,y: x+'$'+y, string))
# # h$e$l$l$o
# # x='h', y='e' -> 'h$e'
# # x='h$e', y='l' -> 'h$e$l'
# # x='h$e$l', y='l' -> 'h$e$l$l'
# # x='h$e$l$l', y='o' -> 'h$e$l$l$o'

